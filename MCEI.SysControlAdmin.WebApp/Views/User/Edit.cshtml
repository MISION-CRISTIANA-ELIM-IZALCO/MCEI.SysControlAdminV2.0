@using MCEI.SysControlAdmin.EN.Role___EN
@model MCEI.SysControlAdmin.EN.User___EN.User

@{
    ViewData["Title"] = "Modificar Usuario";
    List<Role> roles = ViewBag.Roles as List<Role>;
}

<link href="~/css/User/DesignCreateAndEdit.css" rel="stylesheet" />

<br />
<h1>Formulario Modificar Usuario</h1>
<span>@ViewBag.Error</span>
<hr />
<br />
<h3>Información Personal</h3>
<div class="row">
    <div class="col-md-12">
        <form id="Form" asp-action="Edit" onsubmit="CreateRecord(event)" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group-row">
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="LastName" class="control-label"></label>
                    <input asp-for="LastName" class="form-control" />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Email" class="control-label"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group-row">
                <div class="form-group">
                    <label asp-for="IdRole" class="control-label"></label>
                    <select class="form-control form-control-lg" name="IdRole" id="cbxRole">
                        <option value="" selected>Seleccionar</option>
                        @foreach (var item in roles!.Where(r => r.Id != 1)) // Excluir el rol con Id 1
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <span asp-validation-for="IdRole" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Status" class="control-label"></label>
                    <select asp-for="Status" class="form-control form-control-lg" id="cbxStatus">
                        <option value="">Seleccionar</option>
                        <option value="1">Activo</option>
                        <option value="2">Inactivo</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="RecoveryEmail" class="control-label"></label>
                    <input asp-for="RecoveryEmail" class="form-control" placeholder="recuperacion@gmail.com" type="email" />
                    <span asp-validation-for="RecoveryEmail" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="ImageData" class="control-label"></label>
                    <input type="file" class="form-control" id="imagen" name="imagen" onchange="mostrarImagen()" asp-for="ImageData" />
                    <span asp-validation-for="ImageData" class="text-danger"></span>
                </div>
            </div>  
            <div class="form-group-row">
                <div class="form-group">
                    <label asp-for="DateCreated" class="control-label"></label>
                    <input asp-for="DateCreated" type="date" class="form-control" readonly />
                    <span asp-validation-for="DateCreated" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DateModification" class="control-label"></label>
                    <input asp-for="DateModification" type="date" class="form-control" readonly />
                    <span asp-validation-for="DateModification" class="text-danger"></span>
                </div>
            </div>
            <br />
            <div>
                <p><strong>Vista previa de la Fotografia:</strong></p>
                <img id="imagenPreview" src="@(ViewBag.ImageUrl != null ? "data:image/jpeg;base64," + ViewBag.ImageUrl : "")" alt="Vista previa de la imagen" style="max-width: 100%; max-height: 200px;" />
            </div>
            <br />
            <div>
                <a class="btn btn-outline-secondary" asp-action="Index">Regresar A La Lista</a> |
                <input type="submit" value="Modificar Usuario" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<br />

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Ejecuta cuando el documento esté listo
        $(document).ready(function () {
            // Inicializa los valores de los elementos del formulario a partir del modelo
            $("#cbxRole").val('@Model.IdRole');
            $("#cbxStatus").val('@Model.Status');

            // Añadir eventos para actualizar el email dinámicamente
            document.getElementsByName('Name')[0].addEventListener('input', updateEmail);
            document.getElementsByName('LastName')[0].addEventListener('input', updateEmail);

            // Añadir evento de envío al formulario
            const form = document.getElementById('Form');
            if (form) {
                form.addEventListener('submit', CreateRecord);
            }

            // Mostrar alerta si ViewBag.Error tiene un valor
        @if (!string.IsNullOrEmpty(ViewBag.Error))
        {
            @:showErrorAlert('@ViewBag.Error')
            ;
        }
        });
        // Función para mostrar una alerta de error
        function showErrorAlert(message) {
            Swal.fire({
                title: 'Error',
                text: message,
                icon: 'error'
            });
        }
        // Función para actualizar el campo de correo electrónico
        function updateEmail() {
            var name = document.getElementsByName('Name')[0].value;
            var lastName = document.getElementsByName('LastName')[0].value;

            // Tomar el primer nombre y primer apellido
            var firstName = name.split(' ')[0];
            var firstLastName = lastName.split(' ')[0];
            var email = firstName + firstLastName + '@@kerigmamusic.com';

            document.getElementsByName('Email')[0].value = email.toLowerCase(); // Actualiza el campo de correo electrónico
        }
        // Función para mostrar vista previa de la imagen seleccionada
        function mostrarImagen() {
            var archivo = document.getElementById('imagen').files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                var imagenPreview = document.getElementById('imagenPreview');
                imagenPreview.src = e.target.result;
                imagenPreview.style.display = 'block';
            };
            reader.readAsDataURL(archivo);
        }
        // Función para validar los campos Name y LastName
        function validateNameOrLastName(input) {
            const regex = /^[A-ZÑa-zñáéíóúÁÉÍÓÚ. ]+$/;
            if (!regex.test(input.value.trim())) {
                Swal.fire({
                    title: 'Error De Formato',
                    text: 'Por favor, ingresa únicamente letras en los campos Nombre y Apellido.',
                    icon: 'error'
                });
                return false;
            }
            return true;
        }

        // Función para manejar el evento de envío de formulario
        function CreateRecord(e) {
            e.preventDefault(); // Prevenir el envío del formulario

            const form = document.getElementById('Form');
            const nameInput = document.getElementsByName('Name')[0];
            const lastNameInput = document.getElementsByName('LastName')[0];

            // Validar los campos antes de enviar el formulario
            if (!validateNameOrLastName(nameInput) || !validateNameOrLastName(lastNameInput)) {
                return; // Detener la ejecución si la validación falla
            }

            // Mostrar confirmación antes de enviar
            Swal.fire({
                title: '¿Modificar el registro existente?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, Modificar Registro',
                cancelButtonText: 'Cancelar',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit(); // Enviar el formulario si se confirma
                }
            });
        }
    </script>
}